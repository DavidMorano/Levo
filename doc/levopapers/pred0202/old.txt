
Professor Uht's Hidden Explicit Predication (HEP)
invention 
[citation] 
provides a
mechanism for predicating all instructions in an execution window.
This scheme allows for all instructions in the execution window to be
predicated regardless of the number and variation of branches that may
be in the window.  This is accomplished by calculating predicate and
canceling predicate dependencies and their initial values at
instruction load time (when a group of instructions are loaded into the
Active Station (AS) execution array).  This scheme requires the
presence of a Branch Tracking Buffer that is used to correlate branch
target instructions with the original branch instructions that lead to
them.  This hardware component has not been implemented in less than
roughly O(n ^^ 2) time or space at the present due to the need to
search the entire table simultaneously for all of the instructions to
be loaded in any given clock period.  

The new scheme that I propose is a natural
extension of Professor Uht's existing branch predication scheme.
Rather than computing any predicate dependencies (the predicate addresses)
and their initial predicate values at instruction issue time (the time
that instructions are issued to the ASes in the execution window), 
my proposed scheme would
simply issue the instructions to ASes without any calculated predicate 
dependency
addresses.  

Problems with the use of a predicate tracking buffer

The most significant problem with the older scheme is that
a centralize predicate tracking buffer needs to be maintained.
Although this is not a problem at all for more conventional
microarchitectures, it is more of a problem with a distributed
microarchitecture like that in Levo.   In Levo, all instructions
in a column generally need to be predicated at once in a single
clock period.  This has proven to be very difficult to do with
the centralized predicate tracking buffer.  Each row for
a new instruction needs to associatively search the predicate
tracking buffer simultaneously within a single clock.  This
leads to order h^2 connectivity within the tracking buffer, where
h is the height of a column of ASes in the microarchitecture.
A further complication with a centralized tracking buffer
is that predication of later instructions in a column depend on the
predication and buffer updates from earlier instructions in the column.
These various problems and the hints acquired from the handling
of register and memory dependencies has led to the development
of an execution-time scheme to predicate instructions.

Objectives of the new scheme

The new predication scheme needs to not only avoid the use of a
centralized microarchitectural structure (the predicate tracking buffer
for example) but also needs to satisfy other requirements that are
consistent with a flexible instruction issuing policy.  A scheme needs
to be dependent on the distance (in instructions) between a conditional
branch and the targer of that conditional branch.  When instructions
are issued into the execution window following the static program
order, the distance between a conditional branch and its targer will
equal the difference in their assigned AS time-tags.  However, when
instructions are issued into the window following the taken output path
of a conditional branch, the distance from the branch to its targer may
be zero.  Other issuing policies (not discussed further here) could
possibly provide some pseudo random distance (in ASes) between the
branch instruction and its targer.  Therefor a predication scheme needs
to be insensitive to the distance in ASes between a branch and its
target.
Unlike the previous scheme, no "null-predicate" active stations
need be allocated and managed at instruction issue time (or otherwise)
for the overflow of branch targets to a single instruction.

Overview of the scheme

Instructions are fetched and decoded normally.  When instructions are
ready to be issued into the execution window, conditional branches are
predicted using branches predictors (one per row for example).  The
decoded instruction, its instruction address, along with 
the predictions for conditional branches
are issued to ASes when a column becomes available.  No assignment of
predicate addresses occurs at this time as they will be discovered
dynamically as the instructions begin execution.  Instructions
following conditional branches may be issued to start in an enabled or
disabled state (predicated to execute or not) based on the prediction
of a conditional branch domain that they are in, but this is not
necessary for correct operation.  In effect, a random execution
predicate can be intially assigned to instructions as their execution
predicate
values will change anyway as execution proceeds.
Instructions that are issued following the taken output path
of a conditional branch are marked as such and this is discussed
further later.  This last step serves to distinguish those
instructions that should not base their execution from previous
static ordered instructions that were loaded just before them.
This is already done in LevoSim for this very purpose.

As instructions execute, they will forward predication related
information to future program ordered insstructions.
This is the same in nature as how updated operands are forwarded
for registers or memory values.  Predication related
information is a little bit different and is described in
detail later in the document.  Only relay forwarding is used
for the forwarding of predicate information as opposed to something
like nullify forwarding.  Active stations will snarf forwards
similarly to the way that they snarf operand updates, by
using the time-tag of the forwarding AS in the snarfing logic.

Overflow of branch targets to a single instruction can still occur
but these are handled dynamically as encountered and in a more 
exceptional way as will be seen.  Since instructions were not
predicated at instruction issue time, the number of control
flow paths leading to a single instruction is not known
precesely but is, rather, handled dynamically as the other aspects
of the scheme are.

Active State predicate state

State is maintained in each active station to manage
the handling of instruction flow predicates.
This is similar to the state already maintained within ASes
for the management of register and memory operands.
The state needed for predicate tracking is a little bit
different but makes use of some common principles already used
in the handling of register and memory operands.

Four types of state are maintained in each AS.
Each type basiccally consists of one or more registers, either
alone or organized into a table structure.
These four types of state are :

\begin{itemize}
\item{region predicate}
\item{branch target predicate table}
\item{branch target overflow bit}
\item{branch target invalidation time-tag value}
\end{itemize}   

The first three types of state are mandatory.
The fourth is actually optional but will be discussed along
with the other three.


The first of these is that associated with the
region predicate.  This state has three parts and consists of a :

\begin{itemize}
\item{a valid bit}
\item{a source time-tag value}
\item{a predicate value}
\end{itemize}   

The valid bit is set for all instructions except those instructions
that were issued into the execution window following the
taken output path of a conditional branch.  For these latter
instructions, they never associate (not should they) with the
running regional predicate from the instructions issued
into the execution window sequentially before there.
For this reason, the valie bit is turned off when they are
issued to ASes.  All other instructions can be enabled
for execution by being located in a region that is enabled,
so they are issued to ASes with the valid bit set.
Currently, there is no changing of the valid bit after instruction
issue.  The source time-tag field of the region predicate
state is that of the AS that last forwarded a region predicate
transaction (more of transactions is described later).
This is the identical to the last time-tag value maintained
for input register operands of the AS.  The snarfing rule for
the AS predicate is identical for register operands (any value less than
current but greater or equal to the last one snarfed).
The last bit of state is the value of the region predicate itself.
A zero value means that the region is disabled, a one value means
that it is enabled.

The second major state maintained by each AS for predication
is a table of branch target predicates.
The table consists of a number of fixed sized entries and
each entry has two parts.
The parts of state for each entry consists of :

\begin{itemize}
\item{a valid bit}
\item{a source time-tag value}
\end{itemize}   

The valid bit indicates that the entry is used and that
the associated time-tag value is valid.  Any valid entry
indicates that the current instruction is the possible target
of a previous conditional branch and that the current instruction
if therefor currently predicated
to execute (is enabled).  This further means that the output 
region predicate from this instruction should
be set to TRUE.  The exact calculation of the instruction
execution predicate and its output predicate is presented later.

Any number of table entries are possible but the number should
roughly correspond to the number of conditional branches that
are likely to target a single instruction on the average within
the size (in ML ASes) of a given execution window.
Program characterization can be used to pick a good value for the
number of entries.  When more branch target predicates
are received than there are entries for, an overflow mechanism
is invoked.  Predicate-only active stations are neither assigned
at issue time nor are they used in the scheme.
Rather, a dynamic overflow scheme is used to handle these circumstances.
Invalid entries are available for storing
time-tags for new branch target matches to the current instruction.



Next, there is maintained an overflow bit 
for those cases when a given instruction is the
target of more conditional branches than there are branch target
predicate entries for in the table just described.
When the overflow bit is clear, it indicates that an overflow
condition is not in effect for the current AS.
If the bit is set, it indicates that an overflow of
branch target predicate matches with the current instruction
has occurred.  Since the existance of branch target predicates 
for the current instruction
always indicates
that the current instrcution is predicated to execute, no
ambiguity of the predication status is manifest until all existing
branch target predicates are invalidated.
 

Finally, each AS can maintain a state register that holds
a time-tag value that can further govern the management of
the branch target predicate table.


Detailed Operation

As instructions execute they forward any significant changes in
predicate information that future (time-tag valued) instructions will
use to determine their branch domains and whether they are a target of
one or more previous branches.  Two types of predicate forwards are
identified.  One type is associated with non-branch instructions as the
source of the forward.  The other type is associated with branch
instructions as being the source of the forward operation.  When a
non-branch instruction forwards predicate information it will forward
only a region predicate.  The snooping ASes in the future will possibly
snarf this predicate value according to normal snarfing rules for the
comparison of time-tags that is already used for register snarfing.
Snarfing ASes will update their regional predicate state to reflect the
latest TT value and the new value for the region predicate.  Branch
instructions forward more information that includes :

	+ its source TT
	+ its branch target address
	+ its output region predicate value
	+ its output branch target predicate value 

Snooping ASes, upon seeing a branch forward operation, will snarf and
update its region predicate the same as if a non-branch instruction
performed a predicate forward operation.  However additional work is
done also.  The snooping AS will compare its instruction address (which
it received at instruction load time through one of at least two
mechanisms) with the branch target address that is forwarded by the
branch instruction.  If there is a match on the branch target address,
the snooping AS will also look to see if the branch is predicated taken
and that its branch target predicate value is true (indicating that
instruction flow is currently predicted to come through the taken
branch).  In this circumstance, the snooping AS will allocate
a previously unused branch target predicate state register for holding
the TT value of the originating branch AS.  The value of the predicate
is TRUE since we would not have allocated a register slot if it were not.
A new output region predicate is computed by the snarfing AS as
follows :

	Pr,output = Pr,input + (any active branch target predicates)

If the output region predicate changes from its previous value, it is
forwarded the same as in the existing scheme.  The above equation, of
course, provides the mechanism to "cancel" a negative region predicate
that may have been in effect.

The use of forwarding branch target instruction addresses rather than
target time-tag values (previously proposed some time ago) is to handle
the situations where the target of a brach does not lie the same number
of ASes forward in time as the branch target address might indicate.  A
dynamic change in the instruction flow may have been loaded into the AS
execution window and this can obviously cause target instructions of a
conditional branch to lie any number of ASes into the future rendering
the relative computation of a target TT value to be of no use.  Rather,
by having branch instructions broadcast the absolute target instruction
address, the possible target instruction can snarf on an instruction
address match regardless of how many ASes into the future it may lie
within the window.

Now, when a branch instruction forwards a change in its output branch
target predicate such that it becomes negative (the branch is no longer
predicated to be taken or it is no longer predicted to execute itself),
it will perform a predicate forward operation.  Snooping ASes will
again match on target address but will also search to see if that
branch target predicate from the originating branch instruction was
previously recorded.  If it was previously recorded, the branch target
predicate address state register slot that was occupied becomes
unoccupied.  This amounts to the loss of a positive input to its
execution predicate and its output region predicate value.  If the
output predicate region value changes, this instruction will perform,
in turn, its own predicate forward operation.

Of course, the target of a branch instruction can itself be a branch
instruction and this is handled in the expected straight forward manner
(as in the current scheme also).  Further, no ordering of any kind is
needed for the forwarding of predicate information, whether it be from
a non-branch instruction or from a branch instruction.  This latter
feature is a critically important one (in the strong opinion of this
author) because current predicate forwarding bus mechanisms when
combined with the existing grouping of ASes into Sharing Groups cannot
necessarily guarantee the order of predicate forward operations.  The
order of predicate forward operations may be mixed up due to additional
structural hazards in the machine such as the priority and queue delate
for the use of a Processing Element when one may be needed for the
execution of a branch that may require some non-trivial computation.
In any event, it is certainly advantageous to not require a strict
ordering of predicate forward operations for other circumstances (if
there were not enough already) being yet unforeseen.

The difficulty with the proposed scheme occurs when the target of a
branch already has all of its architected (machine configured) branch
target predicate address state registers already used up and then a
match occurs with a new originating branch instruction that was not
previously recorded in the AS.  What we would like to do is to allocate
an additional predicate address state register to hold the new
predicate source TT value but this is not possible since all of the
registers are used up.  Rather we can either ignore the new branch
match condition or we can replace an existing branch predicate address
with the new one.  In either case, the overflow bit is set in the AS
state.  The replacement policy for handling overflow branch target
matches is something that could be researched further for that policy
that gives best execution performance.  We have to set the overflow bit
because we needed to track that an overflow occurred.  This is
necessary so that after all existing branch target matches go negative
due to subsequent forward operations (and their associated addresses
removed from the branch target predicate address state registers) and
when the region predicate of the current AS also goes negative, we need
to know that there is still an ambiguity about whether the current AS
is predicated to execute or not.  The problem comes into play on how to
resolve this ambiguity.  The most natural mechanism would require the
addition of a predicate backwarding bus of some sort in order for
ASes that have reached an ambiguous state to make a request backwards.
This backwards request would essentially ask all branch instructions
to resend a predicate forwarding operation so that any branch target
matches for those branches that are predicated to execute and to
execute taken can be be snarfed by the ambiguous AS.  At least
once backwarding request would have to be made for any AS in an
ambiguous state before the ambiguous AS could be allowed to commit.

Branch Target Predicate Address Register Replacement Policy

Some thought can now be given to the replacement policy for storing
matching branch target predicate addresses.  We obviously would want to
minimize the likelihood of having as AS ever reaching an ambiguous
state.  The likelihood of an AS reaching an ambiguous state is already
probably quite low but will always remain non-zero if the number of
configured branch target predicate address storage registers in an AS
is less than the AS window size (same as the current scheme).  The
probability of an AS reaching an ambiguous state will only occur after
both overflow occurs and when its region predicate goes negative.  This
is somewhat less than the probability of some number of preceding
branches all predicting that they are both being executing and are
being taken and when all of those branches target a single AS.  So we
are probably talking a some low probability for ASes to ever reach an
ambiguous state as it is.  Simulations can show the exact likelihoods
involved with real code.  Replacement policies that have been thought
of include :

	+ ignore the latest match and keep existing entries
	+ replace a branch target predicate address such that
	  the latest time-tag values are retained
	+ replace a branch target predicate address such that
	  the earliest time-tag values are retained
	+ maintain an age associated with a branch target predicate address
	  (updated each clock for example) and only replace the oldest aged
	  entry
	+ maintain an age and replace the youngest aged entry
	+ some combination of the above

As already stated, simulations could explore what replacement policy
might perform best.

Other Possibilities

Some other manipulations of these dynamic predicates maintained by an
AS may be possible and may or may not provide some performance
advantages.  Currently, region predicates are maintained dynamically by
a chain of regional predicate dependencies.  State associated in an
AS to maintain this chaining is a region predicate address and a region
predicate value.  If a target of a branch is serving as the previous
link in a region predicate chain for a future instruction and that
branch target AS snarfs a branch predicate forward operation such that
its execution predicate now only depends on its own region predicate,
that branch target AS can forward information to succeeding ASes so
that they unlink the branch target address and revert back to the
region predicate address that was the original region predicate of the
branch target AS.  This unlinking operation would be possible by the
branch target AS forwarding its own region predicate address along with
its own predicate forward operation.  This would be a GOTO predicate
address for future ASes that could be used to essentially unlink the
intermediate branch target AS.  The snarfing of a predicate forward
operation with a possible GOTO predicate address could then update its
own predicate address to that of the GOTO value rather than the
existing value (that of the AS that was the target itself of a
branch).  Of course, a good picture would help but I do not have one
made up as yet.

What would a region predicate unlink operation do to help overall
operation ?  It will eliminate one indirection for those ASes that were
dependent on an AS that was itself target of a branch when that ASes
execution predication no longer is valid through the taking of any
branches.  Of course, this unlinked operation can continue backwards
through many combinations of ASes that are the target of a branch.
Other unlinking operations are also possible but do not appear do be as
useful as the one described so far since they would quickly degenerate
into additional chaining links (often the same as before) as the
intermediate instructions send their own predicate updates forward.
