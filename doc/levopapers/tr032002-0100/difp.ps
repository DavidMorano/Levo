%!PS-Adobe-2.0
%%Copyright: Copyright (c) 1993 AT&T, All Rights Reserved
%%Version: 3.4.1
%%DocumentFonts: (atend)
%%Pages: (atend)
%%EndComments
/DpostDict 200 dict def
DpostDict begin
%
% Copyright (c) 1993 AT&T, All Rights Reserved
%
% Version 3.4 prologue for troff files.
%

/#copies 1 store
/Prologue (dpost.ps) def
/aspectratio 1 def
/formsperpage 1 def
/landscape false def
/linewidth .3 def
/magnification 1 def
/margin 0 def
/orientation 0 def
/resolution 720 def
/rotation 1 def
/xoffset 0 def
/yoffset 0 def

/roundpage true def
/useclippath true def
/pagebbox [0 0 612 792] def

/R  /Times-Roman def
/I  /Times-Italic def
/B  /Times-Bold def
/BI /Times-BoldItalic def
/H  /Helvetica def
/HI /Helvetica-Oblique def
/HB /Helvetica-Bold def
/HX /Helvetica-BoldOblique def
/CW /Courier def
/CO /Courier def
/CI /Courier-Oblique def
/CB /Courier-Bold def
/CX /Courier-BoldOblique def
/PA /Palatino-Roman def
/PI /Palatino-Italic def
/PB /Palatino-Bold def
/PX /Palatino-BoldItalic def
/Hr /Helvetica-Narrow def
/Hi /Helvetica-Narrow-Oblique def
/Hb /Helvetica-Narrow-Bold def
/Hx /Helvetica-Narrow-BoldOblique def
/KR /Bookman-Light def
/KI /Bookman-LightItalic def
/KB /Bookman-Demi def
/KX /Bookman-DemiItalic def
/AR /AvantGarde-Book def
/AI /AvantGarde-BookOblique def
/AB /AvantGarde-Demi def
/AX /AvantGarde-DemiOblique def
/NR /NewCenturySchlbk-Roman def
/NI /NewCenturySchlbk-Italic def
/NB /NewCenturySchlbk-Bold def
/NX /NewCenturySchlbk-BoldItalic def
/ZD /ZapfDingbats def
/ZI /ZapfChancery-MediumItalic def
/S  /S def
/S1 /S1 def
/GR /Symbol def

/inch {72 mul} bind def
/min {2 copy gt {exch} if pop} bind def

/setup {
	counttomark 2 idiv {def} repeat pop

	landscape {/orientation 90 orientation add def} if
	/scaling 72 resolution div def
	linewidth setlinewidth
	1 setlinecap

	pagedimensions
	xcenter ycenter translate
	orientation rotation mul rotate
	width 2 div neg height 2 div translate
	xoffset inch yoffset inch neg translate
	margin 2 div dup neg translate
	magnification dup aspectratio mul scale
	scaling scaling scale

	addmetrics
	0 0 moveto
} def

/pagedimensions {
	useclippath userdict /gotpagebbox known not and {
		/pagebbox [clippath pathbbox newpath] def
		roundpage currentdict /roundpagebbox known and {roundpagebbox} if
	} if
	pagebbox aload pop
	4 -1 roll exch 4 1 roll 4 copy
	landscape {4 2 roll} if
	sub /width exch def
	sub /height exch def
	add 2 div /xcenter exch def
	add 2 div /ycenter exch def
	userdict /gotpagebbox true put
} def

/landscapepage {
	landscape not {
		0 height scaling div neg translate	% not quite
		90 rotate
	} if
} bind def

/portraitpage {
	landscape {
		width scaling div 0 translate	% not quite
		-90 rotate
	} if
} bind def

/addmetrics {
	/Symbol /S null Sdefs cf
	/Times-Roman /S1 StandardEncoding dup length array copy S1defs cf
} def

/pagesetup {
	/page exch def
	currentdict /pagedict known currentdict page known and {
		page load pagedict exch get cvx exec
	} if
} def

/decodingdefs [
	{counttomark 2 idiv {y moveto show} repeat}
	{neg /y exch def counttomark 2 idiv {y moveto show} repeat}
	{neg moveto {2 index stringwidth pop sub exch div 0 32 4 -1 roll widthshow} repeat}
	{neg moveto {spacewidth sub 0.0 32 4 -1 roll widthshow} repeat}
	{counttomark 2 idiv {y moveto show} repeat}
	{neg setfunnytext}
] def

/setdecoding {/t decodingdefs 3 -1 roll get bind def} bind def

/w {neg moveto show} bind def
/m {neg dup /y exch def moveto} bind def
/done {/lastpage where {pop lastpage} if} def

/f {
	dup /font exch def findfont exch
	dup /ptsize exch def scaling div dup /size exch def scalefont setfont
	linewidth ptsize mul scaling 10 mul div setlinewidth
	/spacewidth ( ) stringwidth pop def
} bind def

/changefont {
	/fontheight exch def
	/fontslant exch def
	currentfont [
		1 0
		fontheight ptsize div fontslant sin mul fontslant cos div
		fontheight ptsize div
		0 0
	] makefont setfont
} bind def

/sf {f} bind def

/cf {
	dup length 2 idiv
	/entries exch def
	/chtab exch def
	/newencoding exch def
	/newfont exch def

	findfont dup length 1 add dict
	/newdict exch def
	{1 index /FID ne {newdict 3 1 roll put}{pop pop} ifelse} forall

	newencoding type /arraytype eq {newdict /Encoding newencoding put} if

	newdict /Metrics entries dict put
	newdict /Metrics get
	begin
		chtab aload pop
		1 1 entries {pop def} for
		newfont newdict definefont pop
	end
} bind def

%
% A few arrays used to adjust reference points and character widths in some
% of the printer resident fonts. If square roots are too high try changing
% the lines describing /radical and /radicalex to,
%
%	/radical	[0 -75 550 0]
%	/radicalex	[-50 -75 500 0]
%
% Move braceleftbt a bit - default PostScript character is off a bit.
%

/Sdefs [
	/bracketlefttp		[201 500]
	/bracketleftbt		[201 500]
	/bracketrighttp		[-81 380]
	/bracketrightbt		[-83 380]
	/braceleftbt		[203 490]
	/bracketrightex		[220 -125 500 0]
	/radical		[0 0 550 0]
	/radicalex		[-50 0 500 0]
	/parenleftex		[-20 -170 0 0]
	/integral		[100 -50 500 0]
	/infinity		[10 -75 730 0]
] def

/S1defs [
	/underscore		[0 80 500 0]
	/endash			[7 90 650 0]
] def
%
% Copyright (c) 1993 AT&T, All Rights Reserved
%
% A first cut at a company wide version of postcommon.ps.
% Includes Matthijs Melchior's version of roundpagebbox,
% but disables adjustments for postprint. This is just an
% example - it should not be considered final or official.
%

/roundpagebbox {
	Prologue (postprint.ps) ne {
		pagebbox dup 0 get pagebbox 2 get add 2 exch put
		pagebbox dup 1 get pagebbox 3 get add 3 exch put
		pagebbox 0 0 put
		pagebbox 1 0 put
		userdict /origin-at-paper-edge true put
	} if
} bind def

end
%%EndProlog
%%BeginSetup
DpostDict begin
mark
/yoffset 0.2 def
/resolution 720 def
setup
2 setdecoding
end
%%EndSetup
%%Page: 1 1
DpostDict begin
/saveobj save def
mark
1 pagesetup
10 CW f
(Dynamic Instruction Flow Predication)3 2160 1 720 360 t
(Dave Morano)1 660 1 720 480 t
(December 1, 2000)2 960 1 720 600 t
(Professor Uht's Hidden Explicit Predication invention provides a)7 3840 1 720 960 t
(mechanism for predicating all instructions in an execution window.)8 3960 1 720 1080 t
(This scheme allows for all instructions in the execution window to be)11 4140 1 720 1200 t
(predicated regardless of the number and variation of branches that may)10 4200 1 720 1320 t
( is accomplished by calculating predicate and)6 2700( This)1 360(be in the window.)3 1020 3 720 1440 t
(canceling predicate dependencies and their initial values at)7 3600 1 720 1560 t
(instruction load time \(when a group of instructions are loaded into the)11 4260 1 720 1680 t
( scheme requires the)3 1200( This)1 360(Active Station \(AS\) execution array\).)4 2220 3 720 1800 t
(presence of a Branch Tracking Buffer that is used to correlate branch)11 4140 1 720 1920 t
(target instructions with the original branch instructions that lead to)9 4200 1 720 2040 t
( hardware component has not been implemented in less than)9 3420(them. This)1 660 2 720 2160 t
(roughly O\(n \303\303 2\) time or space at the present due to the need to)14 3900 1 720 2280 t
(search the entire table simultaneously for all of the instructions to)10 4140 1 720 2400 t
( there may be)3 780( Further,)1 600(be loaded in any given clock period.)6 2160 3 720 2520 t
(instructions loaded into the Active Station execution window that do)9 4080 1 720 2640 t
(not come from the i-load buffer\(s\) but rather are just copied from)11 3960 1 720 2760 t
( these latter)2 780( In)1 240(existing previously loaded Active Station columns.)5 3000 3 720 2880 t
(cases, it is not always easy to create the correct predicate dependency)11 4260 1 720 3000 t
(relationships between the new instructions in the new AS column and)10 4020 1 720 3120 t
(other instructions within the new column or in previously existing)9 3960 1 720 3240 t
( region predicate flows naturally from the previous column)8 3480(columns. The)1 780 2 720 3360 t
(but the canceling predicate addresses of the new column might have to)11 4140 1 720 3480 t
(point to entries in the newly loaded column as well as from one or more)14 4260 1 720 3600 t
(of the previously loaded columns depending on the exact nature of the)11 4140 1 720 3720 t
( latter)1 420( This)1 360(control flow and instructions in the copied column.)7 3060 3 720 3840 t
(situation would appear to require the use of the Branch Tracking Buffer)11 4260 1 720 3960 t
(to handle all possible flexibility of creating new AS columns that are)11 4200 1 720 4080 t
( Certainly)1 660(currently envisioned or may be investigated in the future.)8 3480 2 720 4200 t
(some simpler predicate assignment mechanism may be possible with the)9 4080 1 720 4320 t
( the issue of difficult)4 1380( Both)1 360(loss of some flexibility also.)4 1800 3 720 4440 t
(manipulation of the Branch Tracking Buffer and additional flexibility)8 4140 1 720 4560 t
(for i-load of new AS columns may be achieved if some sort of dynamic)13 4080 1 720 4680 t
(flow predication scheme is used rather than the current relatively)9 3960 1 720 4800 t
(static scheme.)1 840 1 720 4920 t
(The new scheme that I propose is \(or would appear to be\) a natural)13 3960 1 720 5160 t
(extension of Professor Uht's existing branch predication scheme.)7 3840 1 720 5280 t
(Rather than computing any predicate dependencies \(predicate addresses\))7 4200 1 720 5400 t
(and their initial predicate values at instruction load time \(the time)10 4140 1 720 5520 t
(that instructions are loaded into ASes\), my proposed scheme would)9 3900 1 720 5640 t
(simply load the instructions into ASes without any predicate dependency)9 4260 1 720 5760 t
( is one natural input predicate that every instruction)8 3240(addresses. There)1 1020 2 720 5880 t
( predicate)1 600( This)1 360(has and that is its input branch region predicate.)8 3000 3 720 6000 t
(would be managed by each individual AS by maintaining state for the last)12 4320 1 720 6120 t
(time-tag \(TT\) value that it snarfed a region predicate from and the)11 4020 1 720 6240 t
( is, of course, similar to the)6 1800( This)1 360(last region predicate value.)3 1680 3 720 6360 t
( additional state would be)4 1560( Further,)1 600(existing predication scheme.)2 1680 3 720 6480 t
( correspond)1 660( These)1 420(maintained in each AS for branch target predicates.)7 3060 3 720 6600 t
(quite exactly to the existing canceling predicate addresses of the)9 3960 1 720 6720 t
( state maintained for these branch target)6 2460( The)1 300(current scheme.)1 900 3 720 6840 t
(predicates would consist of a fixed number of branch target predicate)10 4140 1 720 6960 t
( addition, there would be maintained an overflow bit \(to)9 3360(addresses. In)1 840 2 720 7080 t
(be described later\) for those cases when a given instruction is the)11 4020 1 720 7200 t
(target of more than the number of branch target predicate address and)11 4140 1 720 7320 t
( this scheme,)2 780( In)1 240(value state registers that are configured into the AS.)8 3240 3 720 7440 t
cleartomark
showpage
saveobj restore
end
%%EndPage: 1 1
%%Page: 2 2
DpostDict begin
/saveobj save def
mark
2 pagesetup
10 CW f
(unlike in the existing one, no use of predicate-only ASes will be used)12 4200 1 720 360 t
(for the storage of additional branch target predicate state registers)9 4140 1 720 480 t
(since it is not known at either instruction load time or for possibly)12 4140 1 720 600 t
(much of an instruction's execution time how many branches are targeting)10 4260 1 720 720 t
( the overflow bit will come into play)7 2220( Rather)1 480(the current instruction.)2 1440 3 720 840 t
(for those cases where additional branches have targeted the current)9 4020 1 720 960 t
(instruction and no additional branch target predicate state registers)8 4140 1 720 1080 t
(are available.)1 840 1 720 1200 t
(Operation)720 1440 w
(As instructions execute they forward any significant changes in)8 3780 1 720 1680 t
(predicate information that future \(time-tag valued\) instructions will)7 4140 1 720 1800 t
(use to determine their branch domains and whether they are a target of)12 4200 1 720 1920 t
( types of predicate forwards are)5 1920( Two)1 300(one or more previous branches.)4 1800 3 720 2040 t
( type is associated with non-branch instructions as the)8 3300(identified. One)1 960 2 720 2160 t
( other type is associated with branch)6 2220( The)1 300(source of the forward.)3 1320 3 720 2280 t
( a)1 120( When)1 360(instructions as being the source of the forward operation.)8 3480 3 720 2400 t
(non-branch instruction forwards predicate information it will forward)7 4140 1 720 2520 t
( snooping ASes in the future will possibly)7 2520( The)1 300(only a region predicate.)3 1440 3 720 2640 t
(snarf this predicate value according to normal snarfing rules for the)10 4140 1 720 2760 t
(comparison of time-tags that is already used for register snarfing.)9 4020 1 720 2880 t
(Snarfing ASes will update their regional predicate state to reflect the)10 4260 1 720 3000 t
( Branch)1 480(latest TT value and the new value for the region predicate.)10 3540 2 720 3120 t
(instructions forward more information that includes :)6 3180 1 720 3240 t
(+ its source TT)3 900 1 1200 3480 t
(+ its branch target address)4 1620 1 1200 3600 t
(+ its output region predicate value)5 2100 1 1200 3720 t
(+ its output branch target predicate value \(same as a canceling)10 3780 1 1200 3840 t
(predicate although it does not have to be\))7 2520 1 1320 3960 t
(+ its currently predicted branch condition)5 2520 1 1200 4080 t
(Snooping ASes, upon seeing a branch forward operation, will snarf and)10 4140 1 720 4320 t
(update its region predicate the same as if a non-branch instruction)10 4020 1 720 4440 t
( additional work is)3 1140( However)1 540(performed a predicate forward operation.)4 2400 3 720 4560 t
( snooping AS will compare its instruction address \(which)8 3360( The)1 300(done also.)1 600 3 720 4680 t
(it received at instruction load time through one of at least two)11 3840 1 720 4800 t
(mechanisms\) with the branch target address that is forwarded by the)10 4020 1 720 4920 t
( there is a match on the branch target address,)9 2820( If)1 240(branch instruction.)1 1140 3 720 5040 t
(the snooping AS will also look to see if the branch is predicated taken)13 4260 1 720 5160 t
(and that its branch target predicate value is true \(indicating that)10 4020 1 720 5280 t
(instruction flow is currently predicted to come through the taken)9 3900 1 720 5400 t
( this circumstance, the snooping AS will allocate)7 2940(branch\). In)1 720 2 720 5520 t
(a previously unused branch target predicate state register for holding)9 4200 1 720 5640 t
( value of the predicate)4 1380( The)1 300(the TT value of the originating branch AS.)7 2520 3 720 5760 t
(is TRUE since we would not have allocated a register slot if it were not.)14 4380 1 720 5880 t
(A new output region predicate is computed by the snarfing AS as)11 3780 1 720 6000 t
(follows :)1 540 1 720 6120 t
(Pr,output = Pr,input + \(any active branch target predicates\))8 3600 1 1200 6360 t
(If the output region predicate changes from its previous value, it is)11 4140 1 720 6600 t
( above equation, of)3 1140( The)1 300(forwarded the same as in the existing scheme.)7 2700 3 720 6720 t
(course, provides the mechanism to "cancel" a negative region predicate)9 4200 1 720 6840 t
(that may have been in effect.)5 1740 1 720 6960 t
(The use of forwarding branch target instruction addresses rather than)9 4140 1 720 7200 t
(target time-tag values \(previously proposed some time ago\) is to handle)10 4260 1 720 7320 t
(the situations where the target of a brach does not lie the same number)13 4260 1 720 7440 t
cleartomark
showpage
saveobj restore
end
%%EndPage: 2 2
%%Page: 3 3
DpostDict begin
/saveobj save def
mark
3 pagesetup
10 CW f
( A)1 180(of ASes forward in time as the branch target address might indicate.)11 4080 2 720 360 t
(dynamic change in the instruction flow may have been loaded into the AS)12 4260 1 720 480 t
(execution window and this can obviously cause target instructions of a)10 4200 1 720 600 t
(conditional branch to lie any number of ASes into the future rendering)11 4200 1 720 720 t
( Rather,)1 540(the relative computation of a target TT value to be of no use.)12 3720 2 720 840 t
(by having branch instructions broadcast the absolute target instruction)8 4260 1 720 960 t
(address, the possible target instruction can snarf on an instruction)9 4080 1 720 1080 t
(address match regardless of how many ASes into the future it may lie)12 4080 1 720 1200 t
(within the window.)2 1080 1 720 1320 t
(Now, when a branch instruction forwards a change in its output branch)11 4140 1 720 1560 t
(target predicate such that it becomes negative \(the branch is no longer)11 4260 1 720 1680 t
(predicated to be taken or it is no longer predicted to execute itself\),)12 4260 1 720 1800 t
( ASes will)2 600( Snooping)1 600(it will perform a predicate forward operation.)6 2760 3 720 1920 t
(again match on target address but will also search to see if that)12 3900 1 720 2040 t
(branch target predicate from the originating branch instruction was)8 4020 1 720 2160 t
( it was previously recorded, the branch target)7 2760( If)1 240(previously recorded.)1 1200 3 720 2280 t
(predicate address state register slot that was occupied becomes)8 3780 1 720 2400 t
( amounts to the loss of a positive input to its)10 2820(unoccupied. This)1 1020 2 720 2520 t
( the)1 240( If)1 240(execution predicate and its output region predicate value.)7 3480 3 720 2640 t
(output predicate region value changes, this instruction will perform,)8 4140 1 720 2760 t
(in turn, its own predicate forward operation.)6 2700 1 720 2880 t
(Of course, the target of a branch instruction can itself be a branch)12 4080 1 720 3120 t
(instruction and this is handled in the expected straight forward manner)10 4260 1 720 3240 t
( no ordering of any kind is)6 1620( Further,)1 600(\(as in the current scheme also\).)5 1920 3 720 3360 t
(needed for the forwarding of predicate information, whether it be from)10 4200 1 720 3480 t
( latter)1 420( This)1 360(a non-branch instruction or from a branch instruction.)7 3240 3 720 3600 t
(feature is a critically important one \(in the strong opinion of this)11 4080 1 720 3720 t
(author\) because current predicate forwarding bus mechanisms when)7 3840 1 720 3840 t
(combined with the existing grouping of ASes into Sharing Groups cannot)10 4200 1 720 3960 t
( The)1 300(necessarily guarantee the order of predicate forward operations.)7 3840 2 720 4080 t
(order of predicate forward operations may be mixed up due to additional)11 4260 1 720 4200 t
(structural hazards in the machine such as the priority and queue delate)11 4260 1 720 4320 t
(for the use of a Processing Element when one may be needed for the)13 3960 1 720 4440 t
(execution of a branch that may require some non-trivial computation.)9 4080 1 720 4560 t
(In any event, it is certainly advantageous to not require a strict)11 3960 1 720 4680 t
(ordering of predicate forward operations for other circumstances \(if)8 4080 1 720 4800 t
(there were not enough already\) being yet unforeseen.)7 3120 1 720 4920 t
(The difficulty with the proposed scheme occurs when the target of a)11 4020 1 720 5160 t
(branch already has all of its architected \(machine configured\) branch)9 4140 1 720 5280 t
(target predicate address state registers already used up and then a)10 4020 1 720 5400 t
(match occurs with a new originating branch instruction that was not)10 4020 1 720 5520 t
( we would like to do is to allocate)8 2100( What)1 360(previously recorded in the AS.)4 1800 3 720 5640 t
(an additional predicate address state register to hold the new)9 3720 1 720 5760 t
(predicate source TT value but this is not possible since all of the)12 4020 1 720 5880 t
( we can either ignore the new branch)7 2160( Rather)1 480(registers are used up.)3 1320 3 720 6000 t
(match condition or we can replace an existing branch predicate address)10 4200 1 720 6120 t
( either case, the overflow bit is set in the AS)10 2820( In)1 240(with the new one.)3 1020 3 720 6240 t
( replacement policy for handling overflow branch target)7 3300(state. The)1 660 2 720 6360 t
(matches is something that could be researched further for that policy)10 4140 1 720 6480 t
( have to set the overflow bit)6 1740( We)1 240(that gives best execution performance.)4 2280 3 720 6600 t
( is)1 180( This)1 360(because we needed to track that an overflow occurred.)8 3180 3 720 6720 t
(necessary so that after all existing branch target matches go negative)10 4200 1 720 6840 t
(due to subsequent forward operations \(and their associated addresses)8 4080 1 720 6960 t
(removed from the branch target predicate address state registers\) and)9 4140 1 720 7080 t
(when the region predicate of the current AS also goes negative, we need)12 4260 1 720 7200 t
(to know that there is still an ambiguity about whether the current AS)12 4140 1 720 7320 t
( problem comes into play on how to)7 2040( The)1 300(is predicated to execute or not.)5 1920 3 720 7440 t
cleartomark
showpage
saveobj restore
end
%%EndPage: 3 3
%%Page: 4 4
DpostDict begin
/saveobj save def
mark
4 pagesetup
10 CW f
( most natural mechanism would require the)6 2460( The)1 300(resolve this ambiguity.)2 1380 3 720 360 t
(addition of a predicate backwarding bus of some sort in order for)11 3900 1 720 480 t
(ASes that have reached an ambiguous state to make a request backwards.)11 4200 1 720 600 t
(This backwards request would essentially ask all branch instructions)8 4080 1 720 720 t
(to resend a predicate forwarding operation so that any branch target)10 4080 1 720 840 t
(matches for those branches that are predicated to execute and to)10 3840 1 720 960 t
( least)1 360( At)1 240(execute taken can be be snarfed by the ambiguous AS.)9 3120 3 720 1080 t
(once backwarding request would have to be made for any AS in an)12 3780 1 720 1200 t
(ambiguous state before the ambiguous AS could be allowed to commit.)10 4020 1 720 1320 t
(Branch Target Predicate Address Register Replacement Policy)6 3540 1 720 1560 t
(Some thought can now be given to the replacement policy for storing)11 4020 1 720 1800 t
( obviously would want to)4 1440( We)1 240(matching branch target predicate addresses.)4 2580 3 720 1920 t
(minimize the likelihood of having as AS ever reaching an ambiguous)10 3960 1 720 2040 t
( likelihood of an AS reaching an ambiguous state is already)10 3540(state. The)1 660 2 720 2160 t
(probably quite low but will always remain non-zero if the number of)11 4020 1 720 2280 t
(configured branch target predicate address storage registers in an AS)9 4140 1 720 2400 t
( The)1 300(is less than the AS window size \(same as the current scheme\).)11 3660 2 720 2520 t
(probability of an AS reaching an ambiguous state will only occur after)11 4200 1 720 2640 t
( This)1 360(both overflow occurs and when its region predicate goes negative.)9 3900 2 720 2760 t
(is somewhat less than the probability of some number of preceding)10 3900 1 720 2880 t
(branches all predicting that they are both being executing and are)10 3960 1 720 3000 t
( we)1 180( So)1 240(being taken and when all of those branches target a single AS.)11 3720 3 720 3120 t
(are probably talking a some low probability for ASes to ever reach an)12 4140 1 720 3240 t
( can show the exact likelihoods)5 1860( Simulations)1 780(ambiguous state as it is.)4 1500 3 720 3360 t
( policies that have been thought)5 1920( Replacement)1 780(involved with real code.)3 1440 3 720 3480 t
(of include :)2 720 1 720 3600 t
(+ ignore the latest match and keep existing entries)8 3060 1 1200 3840 t
(+ replace a branch target predicate address such that)8 3180 1 1200 3960 t
(the latest time-tag values are retained)5 2340 1 1320 4080 t
(+ replace a branch target predicate address such that)8 3180 1 1200 4200 t
(the earliest time-tag values are retained)5 2460 1 1320 4320 t
(+ maintain an age associated with a branch target predicate address)10 4020 1 1200 4440 t
(\(updated each clock for example\) and only replace the oldest aged)10 3900 1 1320 4560 t
(entry)1320 4680 w
(+ maintain an age and replace the youngest aged entry)9 3180 1 1200 4800 t
(+ some combination of the above)5 1860 1 1200 4920 t
(As already stated, simulations could explore what replacement policy)8 4080 1 720 5160 t
(might perform best.)2 1140 1 720 5280 t
(Other Possibilities)1 1140 1 720 5520 t
(Some other manipulations of these dynamic predicates maintained by an)9 4140 1 720 5760 t
(AS may be possible and may or may not provide some performance)11 3720 1 720 5880 t
( region predicates are maintained dynamically by)6 2880(advantages. Currently,)1 1380 2 720 6000 t
( associated in an)3 1020( State)1 420(a chain of regional predicate dependencies.)5 2580 3 720 6120 t
(AS to maintain this chaining is a region predicate address and a region)12 4260 1 720 6240 t
( a target of a branch is serving as the previous)10 2880( If)1 240(predicate value.)1 960 3 720 6360 t
(link in a region predicate chain for a future instruction and that)11 3960 1 720 6480 t
(branch target AS snarfs a branch predicate forward operation such that)10 4200 1 720 6600 t
(its execution predicate now only depends on its own region predicate,)10 4140 1 720 6720 t
(that branch target AS can forward information to succeeding ASes so)10 4020 1 720 6840 t
(that they unlink the branch target address and revert back to the)11 3900 1 720 6960 t
(region predicate address that was the original region predicate of the)10 4200 1 720 7080 t
( unlinking operation would be possible by the)7 2700( This)1 360(branch target AS.)2 1020 3 720 7200 t
(branch target AS forwarding its own region predicate address along with)10 4260 1 720 7320 t
( would be a GOTO predicate)5 1560( This)1 360(its own predicate forward operation.)4 2160 3 720 7440 t
cleartomark
showpage
saveobj restore
end
%%EndPage: 4 4
%%Page: 5 5
DpostDict begin
/saveobj save def
mark
5 pagesetup
10 CW f
(address for future ASes that could be used to essentially unlink the)11 4080 1 720 360 t
( snarfing of a predicate forward)5 1920( The)1 300(intermediate branch target AS.)3 1800 3 720 480 t
(operation with a possible GOTO predicate address could then update its)10 4200 1 720 600 t
(own predicate address to that of the GOTO value rather than the)11 3780 1 720 720 t
(existing value \(that of the AS that was the target itself of a)12 3720 1 720 840 t
( course, a good picture would help but I do not have one)12 3360(branch\). Of)1 720 2 720 960 t
(made up as yet.)3 900 1 720 1080 t
(What would a region predicate unlink operation do to help overall)10 3900 1 720 1320 t
( will eliminate one indirection for those ASes that were)9 3360( It)1 240(operation ?)1 660 3 720 1440 t
(dependent on an AS that was itself target of a branch when that ASes)13 4080 1 720 1560 t
(execution predication no longer is valid through the taking of any)10 3960 1 720 1680 t
( course, this unlinked operation can continue backwards)7 3300(branches. Of)1 780 2 720 1800 t
(through many combinations of ASes that are the target of a branch.)11 3960 1 720 1920 t
(Other unlinking operations are also possible but do not appear do be as)12 4260 1 720 2040 t
(useful as the one described so far since they would quickly degenerate)11 4200 1 720 2160 t
(into additional chaining links \(often the same as before\) as the)10 3840 1 720 2280 t
(intermediate instructions send their own predicate updates forward.)7 4020 1 720 2400 t
cleartomark
showpage
saveobj restore
end
%%EndPage: 5 5
%%Trailer
DpostDict begin
done
end
%%Pages: 5
%%DocumentFonts: Courier
